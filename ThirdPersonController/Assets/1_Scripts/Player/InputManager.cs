using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// a Class that processes the inputs
/// </summary>
public class InputManager : MonoBehaviour
{
    PlayerControls playerControls;      // the script generated by Input Action Asset
    AnimatorManager animatorManager;    // Referencing AnimatorManager on Player

    public Vector2 movementInput;       // a variable to hold the movement input
    public float horizontalInput;       // holding the horizontal input only from "movementInput"
    public float verticalInput;         // holding the vertical input only from "movementInput"
    private float moveAmount;

    private void Awake()
    {
        // Referencing AnimatorManager on Player
        animatorManager = GetComponent<AnimatorManager>();
    }

    // Called when the gameobject is enabled
    // Turn on PlayerControls
    private void OnEnable()
    {
        if(playerControls == null)
        {
            // Fill up PlayerControls variable
            playerControls = new PlayerControls();

            // Record the value of the movement when the movement input is executed
            // when "Movement" in Input Actions has been performed, the lambda expression is called
            playerControls.PlayerMovement.Movement.performed += i => movementInput = i.ReadValue<Vector2>();
        }

        playerControls.Enable();
    }

    // Called when the gameobject is enabled
    // Turn off PlayerControls
    private void OnDisable()
    {
        playerControls.Disable();
    }


    // A function to encapsulate all functions related with Player input 
    public void HandleAllInputs()
    {
        HandleMovementInput();
        // HandleJumpInput();
        // HandleActionInput();
    }

    private void HandleMovementInput()
    {
        // Split the movement input by x/y axis
        horizontalInput = movementInput.x;
        verticalInput = movementInput.y;

        // Clamp the input values between 0 and 1 by only using their absolute values since the parameters in animator can only accept values between 0 and 1
        moveAmount = Mathf.Clamp01(Mathf.Abs(horizontalInput) + Mathf.Abs(verticalInput));
        Console.WriteLine(moveAmount);
        animatorManager.UpdateAnimatorValues(0, moveAmount);
    }
}
